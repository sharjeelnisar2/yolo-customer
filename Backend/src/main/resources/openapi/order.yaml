openapi: 3.0.0
info:
  title: YOLO CUSTOMER API
  version: 1.0.0
paths:

  #------eisha------------------------
  /users:
    post:
      tags:
        - user
      summary: Create a new user.
      description: A new user will be created after receiving the username.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: User will be created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/user-profiles/{id}:
    post:
      tags:
        - user
      summary: Create a new user profile.
      description: A new user profile will be created for the user.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileRequest'
      responses:
        '201':
          description: User profile will be created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileRequest'
        '400':
          description: Invalid request parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The user was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{username}:
    get:
      tags:
        - user
      summary: Get User By Username
      description: Retrieve the user if it exists, or return null otherwise.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the user.
      responses:
        '200':
          description: A user is retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No user found against the given username.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /users/orders:
    get:
      parameters:
        - in: query
          name: page
          required: true
          schema:
            type: integer
          description: Page number to be viewed
        - in: query
          name: size
          required: true
          schema:
            type: integer
          description: Number of items per page
        - in: query
          name: status
          required: false
          schema:
            type: string
          description: Status of order
      tags:
        - orders
      summary: Get Orders
      description: Retrieve a list of orders for a user along with the total count of all orders and active orders.
      responses:
        '200':
          description: A list of orders with counts.
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_orders:
                    type: integer
                    description: The total count of all orders.
                  active_orders:
                    type: integer
                    description: The count of active orders.
                  orders:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The unique identifier for the order.
                        order_status_id:
                          type: integer
                          description: The status identifier of the order.
                        user_id:
                          type: integer
                          description: The user who placed the order.
                        amount:
                          type: integer
                          description: The total amount for the order.
                        tracking_id:
                          type: string
                          description: Unique tracking identifier for the order.
                        created_at:
                          type: string
                          format: date-time
                          description: The timestamp when the order was created.
                        updated_at:
                          type: string
                          format: date-time
                          description: The timestamp when the order was last updated.
                        orderItems:
                          type: array
                          description: List of items in the order.
                          items:
                            $ref: '#/components/schemas/OrderItem'


    #------Ahmad------------------------
    post:
      tags:
        - orders
      summary: Place an order to the vendor and track it in the internal database
      description: |
        This endpoint allows a customer to place an order to the vendor's system. Upon successful order placement, the order is also saved in the internal database for tracking order history.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceOrderRequest'
      responses:
        '200':
          description: Order placed successfully and tracked internally
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderId:
                    type: integer
                    format: int64
                    example: 1234
                  status:
                    type: string
                    example: PLACED
                  message:
                    type: string
                    example: Order placed successfully
        '400':
          description: Bad request due to invalid order data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  #------valeena------------------------
  /users/orders/{order_code}:
    parameters:
      - in: path
        name: order_code
        required: true
        schema:
          type: string
        description: The tracking ID of the order to be updated
    patch:
      tags:
        - orders
      summary: Update Order
      description: Update the details of a specific order.
      requestBody:
        description: Order status object to update.
        content:
          application/json:
            schema:
              type: object
              properties:
                order_status:
                  type: string
                  description: The new status of the order.
              required:
                - order_status
      responses:
        '200':
          description: Order updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  order_status:
                    type: string
                    description: The status of the order.
                  tracking_id:
                    type: string
                    description: The tracking ID of the order.
                  message:
                    type: string
                    description: Success message.
                    example: Order updated successfully.
        '404':
          description: Order not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'



  #------hassan------------------------

  /users/ideas/recipes:
    get:
      tags:
        - recipes
      summary: Get All Recipes
      description: Retrieve a list of all recipes, optionally filtered by idea ID, with pagination and search functionality.
      parameters:
        - name: ideaId
          in: query
          required: false
          schema:
            type: integer
          description: The ID of the idea to filter recipes by.
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: Search recipes by title or description.
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: The page number for pagination (default is 1).
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: The number of results per page (default is 10).
      responses:
        '200':
          description: A paginated list of recipes, optionally filtered by idea ID and search term.
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: The total number of recipes.
                  page:
                    type: integer
                    description: The current page number.
                  size:
                    type: integer
                    description: The number of recipes per page.
                  recipes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Recipe'
        '400':
          description: Invalid request parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No recipes found for the given criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - recipes
      summary: Create a New Recipe for an Idea
      description: Submit a new recipe for a specific idea identified by its code.

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRecipe'
      responses:
        '201':
          description: Recipe created successfully.
        '400':
          description: Invalid input provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Idea not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # /users/ideas/recipes/{id}:
  #   get:
  #     tags:
  #       - recipes
  #     summary: Get Recipe Details by Recipe ID
  #     description: Retrieve the details of a particular recipe, optionally filtered by idea code.
  #     parameters:
  #       - name: id
  #         in: path
  #         required: true
  #         schema:
  #           type: integer
  #         description: The ID of the recipe.
  #       - name: ideaCode
  #         in: query
  #         required: false
  #         schema:
  #           type: string
  #         description: The code of the idea to filter by.
  #     responses:
  #       '200':
  #         description: Details of the requested recipe.
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Recipe'
  #       '400':
  #         description: Invalid request parameters.
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ErrorResponse'
  #       '401':
  #         description: Unauthorized access.
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ErrorResponse'
  #       '404':
  #         description: The recipe or idea was not found.
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ErrorResponse'
  #       '500':
  #         description: Internal server error.
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ErrorResponse'





  #------moiz------------------------


  /users/ideas:
    post:
      tags:
        - ideas
      summary: Generate an idea
      operationId: generateIdea
      description: Generate an idea for a recipe. The idea will be saved as a draft, and `idea_status` and `idea_code` will be set by the backend.
      requestBody:
        description: Details of the idea to generate
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdeaRequest'
      responses:
        '201':
          description: Idea successfully created.
        '400':
          description: Bad input parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized. The user is not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error. Something went wrong on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - ideas
      summary: Retrieve ideas by status and userId
      operationId: getIdeasByStatus
      description: Retrieve user's ideas based on their status (DRAFT or SUBMITTED).
      parameters:
        - in: query
          name: status
          description: Status of the ideas to retrieve (DRAFT or SUBMITTED)
          required: true
          schema:
            type: string
            enum: [DRAFT, SUBMITTED]
            example: DRAFT
        # Pagination parameters
        - in: query
          name: page
          description: Page number for pagination (default is 1)
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: size
          description: Number of ideas per page (default is 10)
          required: false
          schema:
            type: integer
            example: 10
        # Sorting and filtering parameters
        - in: query
          name: sortOrder
          description: Order of sorting (asc or desc, default is desc) based on createdAt
          required: false
          schema:
            type: string
            enum: [asc, desc]
            example: desc
        # Searching parameter
        - in: query
          name: search
          description: Search query to match idea titles
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Paginated list of ideas matching the criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedIdeasResponse'
        '400':
          description: Bad request. Invalid query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized. The user is not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No ideas found for the user with the given status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error. Something went wrong on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    #------Ahmad------------------------

  /users/ideas/{ideaId}:
    patch:
      tags:
        - ideas
      summary: Submit the idea to the vendor and Update idea status to "submitted"
      description: |
        The idea details are submitted to the vendor's system and updates the status of a customer's idea to "submitted" in the customer database.
      parameters:
        - name: ideaId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 123
          description: The unique ID of the idea to be updated
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitIdeaRequest'
      responses:
        '200':
          description: Idea status updated and submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: SUBMITTED
                  message:
                    type: string
                    example: Idea submitted to the vendor system.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Idea not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    UserRequest:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the user.
        username:
          type: string
          description: Username of the user.

    UserProfileRequest:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the user profile.
        first_name:
          type: string
          description: First name of the user.
        last_name:
          type: string
          description: Last name of the user.
        email:
          type: string
          description: Email of the user.
        contact_no:
          type: string
          description: Contact number of the user.

    AddressRequest:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the address.
        house_no:
          type: string
          description: House number of the user.
        street:
          type: string
          description: Street of the user.
        area:
          type: string
          description: Area of the user.
        city:
          type: string
          description: City of the user.
        country:
          type: string
          description: Country of the user.

    User:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the user.
        role_id:
          type: integer
          description: The role identifier of the user.
        username:
          type: string
          description: Username of the user.
        is_deleted:
          type: boolean
          description: Flag indicating if the user is deleted.
        created_at:
          type: string
          format: date-time
          description: The timestamp when the user was created.
        updated_at:
          type: string
          format: date-time
          description: The timestamp when the user was last updated.

    #------------------valeena------------------------
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: A brief message describing the error.
        details:
          type: string
          description: Additional details about the error.

    Order:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the order.
        order_status_id:
          type: integer
          description: The status identifier of the order.
        user_id:
          type: integer
          description: The user who placed the order.
        amount:
          type: integer
          description: The total amount for the order.
        tracking_id:
          type: string
          description: Unique tracking identifier for the order.
        created_at:
          type: string
          format: date-time
          description: The timestamp when the order was created.
        updated_at:
          type: string
          format: date-time
          description: The timestamp when the order was last updated.

    OrderStatus:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the order status.
        code:
          type: string
          enum: [PENDING, INPROCESS, DISPATCHED]
          maxLength: 16
          description: The code for the order status.
        value:
          type: string
          enum: [Pending, Inprocess, Dispatched]
          maxLength: 16
          description: The value for the order status.
        is_active:
          type: boolean
          description: Indicates if the order status is active.
          default: true
        created_at:
          type: string
          format: date-time
          description: The timestamp when the order status was created.
        updated_at:
          type: string
          format: date-time
          description: The timestamp when the order status was last updated.

    OrderItem:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the order item.
        quantity:
          type: integer
          description: The quantity of the order item.
        order_id:
          type: integer
          description: The identifier of the associated order.
        recipe_id:
          type: integer
          description: The identifier of the associated recipe.
        created_at:
          type: string
          format: date-time
          description: The timestamp when the order item was created.
        updated_at:
          type: string
          format: date-time
          description: The timestamp when the order item was last updated.

    #------------------Ahmad------------------------


    SubmitIdeaRequest:
      type: object
      required:
        - customerName
        - title
        - description
        - ideaCode
      properties:
        customerName:
          type: string
          example: Ahmad
        title:
          type: string
          example: Thai Food
        description:
          type: string
          example: Thai food having fish and excess onions.
        interests:
          type: array
          items:
            type: string
          example:
            - Chicken
            - Thai
            - Chest piece
        dietaryRestrictions:
          type: array
          items:
            type: string
          example:
            - Excess salt
            - Excess oil
            - Excess spices
        ideaCode:
          type: string
          example: I1234


    PlaceOrderRequest:
      type: object
      required:
        - price
        - order_code
        - customer_contact_no
        - address
        - items
      properties:
        price:
          type: number
          format: float
          example: 19999
        order_code:
          type: string
          example: O1234
        customer_contact_no:
          type: string
          example: "+1234567890"
        address:
          type: object
          required:
            - house_no
            - street_no
            - area
            - city
            - country
          properties:
            house_no:
              type: integer
              example: 123
            street_no:
              type: integer
              example: 456
            area:
              type: string
              example: Area

            city:
              type: string
              example: Lahore
            country:
              type: string
              example: Pak
        items:
          type: array
          items:
            type: object
            required:
              - quantity
              - price
              - recipe_code
            properties:
              quantity:
                type: integer
                example: 2
              price:
                type: number
                format: float
                example: 9999
              recipe_code:
                type: integer
                example: 101

    #------------------hassan
    Recipe:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the recipe.
        title:
          type: string
          description: The title of the recipe.
        description:
          type: string
          description: The description of the recipe.
        serving_size:
          type: integer
          description: The number of servings for the recipe.
        price:
          type: number
          format: double
          description: The price of the recipe.
        recipe_code:
          type: string
          description: The code identifying the recipe.

        idea_code:
          type: string
          description: The code identifying the related idea.
        created_at:
          type: string
          format: date-time
          description: The timestamp of when the recipe was created.
        updated_at:
          type: string
          format: date-time
          description: The timestamp of when the recipe was last updated.
        images:
          type: array
          items:
            type: string
            format: uri
          description: List of image URLs for the recipe.

    NewRecipe:
      type: object
      required:
        - title
        - description
        - serving_size
        - price
        - recipe_code
        - idea_code
        - images
      properties:
        title:
          type: string
          description: The title of the recipe.
        description:
          type: string
          description: A brief description of the recipe.
        serving_size:
          type: integer
          description: The number of servings for the recipe.
        price:
          type: number
          format: double
          description: The price of the recipe.
        recipe_code:
          type: string
          description: The code identifying the recipe.
        idea_code:
          type: string
          description: The code identifying the idea.
        images:
          type: array
          items:
            type: string
            format: uri
          description: List of image URLs for the recipe.

    #------------------moiz ------------------------

    IdeaRequest:
      type: object
      required:
        - title
        - description
        - interests
        - dietaryRestrictions
      properties:
        title:
          type: string
          example: Spicy Vegan Tacos
        description:
          type: string
          example: Tacos made with a spicy vegan twist using plant-based ingredients.
        interests:
          type: array
          description: Customer's interests
          items:
            type: string
          example: ["mexican", "spicy"]
        dietaryRestrictions:
          type: array
          description: Customer's Dietary Restrictions
          items:
            type: string
          example: ["gluten-free"]

    IdeaResponse:
      type: object
      properties:
        ideaId:
          type: string
          description: ID of the idea
          example: 12345
        title:
          type: string
          description: Title of the idea
          example: Spicy Vegan Tacos
        description:
          type: string
          description: Description of the idea
          example: Tacos made with a spicy vegan twist using plant-based ingredients.
        interests:
          type: array
          description: Customer's interests
          items:
            type: string
          example: ["mexican", "spicy"]
        dietaryRestrictions:
          type: array
          description: Customer's Dietary Restrictions
          items:
            type: string
          example: ["gluten-free"]
        idea_status:
          type: string
          description: Status of the idea
          example: DRAFT
        idea_code:
          type: string
          description: Code for the idea generated by the backend
          example: 2202
        created_at:
          type: string
          format: date-time
          description: Timestamp when the idea was created
          example: '2024-08-13T14:00:00Z'

    PaginatedIdeasResponse:
      type: object
      properties:
        currentPage:
          type: integer
          description: Current page number
          example: 1
        pageSize:
          type: integer
          description: Number of ideas per page
          example: 10
        totalItems:
          type: integer
          description: Total number of ideas
          example: 100
        totalPages:
          type: integer
          description: Total number of pages
          example: 10
        data:
          type: array
          description: List of ideas in the current page
          items:
            $ref: '#/components/schemas/IdeaResponse'
